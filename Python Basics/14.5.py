# решение линейного уравнения a*x = b
# x = b/a
def linear_solve(a, b):
    return b / a


# 2*x = 9
print(linear_solve(2, 9))


# 0*x = 1
# print(linear_solve(0, 1))


# Модифицируем ее код, чтобы она могла учитывать такое поведение.

def linear_solve(a, b):
    if a:  # помним, что 0 интерпретируется как False, иначе — True
        return b / a
    else:
        return "Нет корней"


# a = 0 and b = 0
print(linear_solve(0, 0))


# Модифицируем нашу программу еще раз.
def linear_solve(a, b):
    if a:
        return b / a
    elif not a and not b:  # снова используем числа в логических выражениях
        return "Бесконечное количество корней"
    else:
        return "Нет корней"


print(linear_solve(0, 0))


# Реализуем функцию, решающую квадратные уравнения
# a*x**2 + b*x + c = 0 - общий вид уравнения
# D = b**2 - 4*a*c - дискриминант
# Если D<0, то уравнение не имеет вещественных корней
# Если D=0, то уравнение имеет один корень - x = -b/(2*a)
# Если D>0, то уравнение имеет два корня
# x1 = (-b - D**0.5)/(2*a)
# x2 = (-b + D**0.5)/(2*a)
#
# P.S. D**0.5 - равносильно извлечению квадратного корня


# Напишите функцию D(a,b,c), возвращающую дискриминант квадратного уравнения.
def D(a, b, c):
    return b ** 2 - 4 * a * c


print(D(1, 2, 3))


# Следующим этапом реализуем функцию, возвращающую «Нет вещественных корней», если дискриминант отрицательный.
def quadratic_solve(a, b, c):
    if D(a, b, c) < 0:
        return 'Нет вещественных корней'


print(D(1, 2, 3))


# Модифицируйте функцию quadratic_solve(a,b,c), чтобы она возвращала единственный корень при условии нулевого
# дискриминанта.
def quadratic_solve(a, b, c):
    if D(a, b, c) < 0:
        return 'Нет вещественных корней'
    elif D(a, b, c) == 0:
        return -b / (2 * a)


# И последним этапом нам нужно вернуть сразу два значения. Конечный вид функции будет выглядеть так:
def quadratic_solve(a, b, c):
    if D(a, b, c) < 0:
        return "Нет вещественных корней"
    elif D(a, b, c) == 0:
        return -b / (2 * a)
    else:
        return (-b - D(a, b, c) ** 0.5) / (2 * a), (-b + D(a, b, c) ** 0.5) / (2 * a)


# разбили строку из input и преобразовали к float
L = list(map(float, input().split()))
print(quadratic_solve(*L))  # * - функция распаковки списка

# Представим, что у нас теперь аргументы хранятся не в виде списка, а в виде словаря.
M = {'a': 1,
     'b': 0,
     'c': -1}
print(quadratic_solve(**M))  # ** - функция распаковки словаря
